// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Panels.Infrastructure.Database;

#nullable disable

namespace Panels.Infrastructure.Database.Migrations
{
    [DbContext(typeof(PanelContext))]
    partial class PanelContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("panels")
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Panels.Domain.Meetings.Categories.MeetingCategory", b =>
                {
                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Index"), 1L, 1);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Value");

                    b.HasKey("Index");

                    b.ToTable("MeetingCategories", "panels");

                    b.HasData(
                        new
                        {
                            Index = 1,
                            Value = "Party"
                        },
                        new
                        {
                            Index = 2,
                            Value = "Social"
                        },
                        new
                        {
                            Index = 3,
                            Value = "Business"
                        },
                        new
                        {
                            Index = 4,
                            Value = "SomeCoffee"
                        },
                        new
                        {
                            Index = 5,
                            Value = "Mentoring"
                        },
                        new
                        {
                            Index = 6,
                            Value = "Unknown"
                        });
                });

            modelBuilder.Entity("Panels.Domain.Meetings.Meeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryIndex")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<Guid>("ExplicitMeetingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ExplicitMeetingId");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit")
                        .HasColumnName("IsPublic");

                    b.Property<int?>("MaxInvitations")
                        .HasColumnType("int")
                        .HasColumnName("MaxInvitations");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryIndex");

                    b.HasIndex("ExplicitMeetingId");

                    b.ToTable("Meetings", "panels");
                });

            modelBuilder.Entity("Panels.Domain.ScheduledMeetings.ScheduledMeeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ScheduledMeetings", "panels");
                });

            modelBuilder.Entity("Panels.Domain.Meetings.Meeting", b =>
                {
                    b.HasOne("Panels.Domain.Meetings.Categories.MeetingCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryIndex")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Panels.Domain.Meetings.Entities.Invitation", "_invitations", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<DateTime>("Created")
                                .HasColumnType("datetime2")
                                .HasColumnName("Created");

                            b1.Property<DateTime?>("DeletedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("DeletedAt");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Email");

                            b1.Property<DateTime>("ExpirationDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("ExpirationDate");

                            b1.Property<DateTime>("LastModified")
                                .HasColumnType("datetime2")
                                .HasColumnName("LastModified");

                            b1.Property<int>("MeetingId")
                                .HasColumnType("int");

                            b1.Property<int>("Status")
                                .HasColumnType("int")
                                .HasColumnName("Status");

                            b1.HasKey("Id");

                            b1.HasIndex("MeetingId");

                            b1.ToTable("Invitations", "panels");

                            b1.WithOwner()
                                .HasForeignKey("MeetingId");
                        });

                    b.OwnsOne("Meetings4IT.Shared.Abstractions.Kernel.ValueObjects.DateRange", "Date", b1 =>
                        {
                            b1.Property<int>("MeetingId")
                                .HasColumnType("int");

                            b1.Property<DateTime?>("EndDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("EndDate");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("StartDate");

                            b1.HasKey("MeetingId");

                            b1.ToTable("Meetings", "panels");

                            b1.WithOwner()
                                .HasForeignKey("MeetingId");
                        });

                    b.OwnsOne("Meetings4IT.Shared.Abstractions.Kernel.ValueObjects.UserInfo", "Organizer", b1 =>
                        {
                            b1.Property<int>("MeetingId")
                                .HasColumnType("int");

                            b1.Property<string>("Identifier")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("OrganizerId");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("OrganizerName");

                            b1.HasKey("MeetingId");

                            b1.ToTable("Meetings", "panels");

                            b1.WithOwner()
                                .HasForeignKey("MeetingId");
                        });

                    b.OwnsOne("Panels.Domain.Meetings.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<int>("MeetingId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("City");

                            b1.Property<string>("NumberStreet")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("NumberStreet");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Street");

                            b1.HasKey("MeetingId");

                            b1.ToTable("Meetings", "panels");

                            b1.WithOwner()
                                .HasForeignKey("MeetingId");
                        });

                    b.OwnsOne("Panels.Domain.Meetings.ValueObjects.MeetingCancellation", "Cancellation", b1 =>
                        {
                            b1.Property<int>("MeetingId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("CancellationDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("CancellationDate");

                            b1.Property<string>("Reason")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MeetingId");

                            b1.ToTable("Meetings", "panels");

                            b1.WithOwner()
                                .HasForeignKey("MeetingId");
                        });

                    b.OwnsMany("Panels.Domain.Meetings.ValueObjects.MeetingImage", "_images", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<string>("Key")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Key");

                            b1.Property<int>("MeetingId")
                                .HasColumnType("int")
                                .HasColumnName("MeetingId");

                            b1.HasKey("Id");

                            b1.HasIndex("MeetingId");

                            b1.ToTable("Images", "panels");

                            b1.WithOwner()
                                .HasForeignKey("MeetingId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Cancellation");

                    b.Navigation("Category");

                    b.Navigation("Date")
                        .IsRequired();

                    b.Navigation("Organizer")
                        .IsRequired();

                    b.Navigation("_images");

                    b.Navigation("_invitations");
                });

            modelBuilder.Entity("Panels.Domain.ScheduledMeetings.ScheduledMeeting", b =>
                {
                    b.OwnsOne("Meetings4IT.Shared.Abstractions.Kernel.ValueObjects.UserInfo", "ScheduleOwner", b1 =>
                        {
                            b1.Property<int>("ScheduledMeetingId")
                                .HasColumnType("int");

                            b1.Property<string>("Identifier")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Identifier");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Name");

                            b1.HasKey("ScheduledMeetingId");

                            b1.ToTable("ScheduledMeetings", "panels");

                            b1.WithOwner()
                                .HasForeignKey("ScheduledMeetingId");
                        });

                    b.OwnsMany("Panels.Domain.ScheduledMeetings.ValueObjects.UpcomingMeeting", "_upcomingMeetings", b1 =>
                        {
                            b1.Property<int>("ScheduledMeetingId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<Guid>("MeetingId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("MeetingId");

                            b1.HasKey("ScheduledMeetingId", "Id");

                            b1.ToTable("UpcomingMeetings", "panels");

                            b1.WithOwner()
                                .HasForeignKey("ScheduledMeetingId");

                            b1.OwnsOne("Meetings4IT.Shared.Abstractions.Kernel.ValueObjects.DateRange", "MeetingDateRange", b2 =>
                                {
                                    b2.Property<int>("UpcomingMeetingScheduledMeetingId")
                                        .HasColumnType("int");

                                    b2.Property<int>("UpcomingMeetingId")
                                        .HasColumnType("int");

                                    b2.Property<DateTime?>("EndDate")
                                        .HasColumnType("datetime2")
                                        .HasColumnName("EndDate");

                                    b2.Property<DateTime>("StartDate")
                                        .HasColumnType("datetime2")
                                        .HasColumnName("StartDate");

                                    b2.HasKey("UpcomingMeetingScheduledMeetingId", "UpcomingMeetingId");

                                    b2.ToTable("UpcomingMeetings", "panels");

                                    b2.WithOwner()
                                        .HasForeignKey("UpcomingMeetingScheduledMeetingId", "UpcomingMeetingId");
                                });

                            b1.Navigation("MeetingDateRange")
                                .IsRequired();
                        });

                    b.Navigation("ScheduleOwner")
                        .IsRequired();

                    b.Navigation("_upcomingMeetings");
                });
#pragma warning restore 612, 618
        }
    }
}
